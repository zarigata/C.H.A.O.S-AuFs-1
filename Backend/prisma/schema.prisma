// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// ============== CODEX MODELS ================
// =============================================
// User model for authentication and profile data
model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  displayName   String
  avatar        String?
  status        UserStatus @default(OFFLINE)
  customStatus  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  sentMessages      Message[]  @relation("SentMessages")
  ownedHubs         Hub[]      @relation("HubOwner")
  hubMemberships    HubMember[]
  sentFriendRequests FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  directMessageParticipants DirectMessageParticipant[]

  @@map("users")
}

// Hub (Server) model for group chat servers
model Hub {
  id          String    @id @default(uuid())
  name        String
  description String?
  icon        String?
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  owner       User      @relation("HubOwner", fields: [ownerId], references: [id])
  channels    Channel[]
  members     HubMember[]

  @@map("hubs")
}

// Channel model for text/voice channels within hubs
model Channel {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        ChannelType @default(TEXT)
  hubId       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  hub         Hub         @relation(fields: [hubId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@map("channels")
}

// Message model for all messages
model Message {
  id              String    @id @default(uuid())
  content         String
  encrypted       Boolean   @default(false)
  senderId        String
  channelId       String?
  directMessageId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  sender          User      @relation("SentMessages", fields: [senderId], references: [id])
  channel         Channel?  @relation(fields: [channelId], references: [id], onDelete: SetNull)
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id], onDelete: SetNull)

  @@map("messages")
}

// DirectMessage model for private conversations
model DirectMessage {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  messages    Message[]
  participants DirectMessageParticipant[]

  @@map("direct_messages")
}

// Junction table for DirectMessage participants
model DirectMessageParticipant {
  directMessageId String
  userId         String
  
  // Relationships
  directMessage  DirectMessage @relation(fields: [directMessageId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([directMessageId, userId])
  @@map("direct_message_participants")
}

// HubMember model for user roles within hubs
model HubMember {
  userId    String
  hubId     String
  role      HubRole   @default(MEMBER)
  nickname  String?
  joinedAt  DateTime  @default(now())

  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hub       Hub       @relation(fields: [hubId], references: [id], onDelete: Cascade)

  @@id([userId, hubId])
  @@map("hub_members")
}

// FriendRequest model for friend connections
model FriendRequest {
  id          String          @id @default(uuid())
  senderId    String
  receiverId  String
  status      FriendStatus    @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relationships
  sender      User            @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User            @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

// Enums
enum UserStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

enum ChannelType {
  TEXT
  VOICE
}

enum HubRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}
